<style>
  .container {
      max-width:85%;
      padding: 0;
  }


  .search-form {
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      background-color: rgba(var(--secondary-rgb), 0.1);
      display: flex;
      flex-direction: column;
      width: 100%;
      padding: 20px;
      border-radius: 5px;
  }



  .dropdown-container {
      display: flex;
      vertical-align: baseline;
      justify-content: space-between;
      width: 100%;
  }

  .dropdown-sort-by {
      text-align: left;
  }


  .search-form input[type="text"] {
      padding: 10px;
      border: 1px solid white;
      border-radius: 5px;
      color: black;
      width: 100%;
      margin-top: 10px;
  }


  .content-on-left {
      display: flex;
      justify-content: flex-start;
      gap: 50px;
      width: 100%;
      vertical-align: baseline;
      margin-top: 1rem;
  }

  .submit-button {
      display: flex;
      background-color: var(--secondary-rgb);
      justify-content: flex-end;
      vertical-align: baseline;
      margin-top: 2rem;
      padding: 0 10px;
      cursor: pointer;
      height: 2.5rem;
  }

  .row-body {
      display: flex;
      justify-content: center;
      margin: 20px auto;
  }

  .col-left {
      flex: 1;
      margin-right: 40px;
      padding: 0px;
      margin-left: 0px;
  }

  .col-right {
      flex: 3;
      width: 80%;
  }

  .div-buttons {
      display: flex;
      justify-content: space-between;
      gap: 2px;
  }

  .div-buttons > button, .div-buttons-bottom > button {
      display: flex;
      justify-content: space-between;
      gap: 2px;
      padding: 0 10px;
  }

  .div-buttons-bottom {
      display: flex;
      justify-content: flex-end;
      gap: 2px;
  }

  .facets-card {
      border-radius: 5px;
      text-align: center;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      color: black;
      padding-bottom: 10px;
  }

  .card-title {
      background-color: var(--secondary);
      color: white;
      width: 100%;
      border-radius: 5px 5px 0px 0px;
      padding: 10px 0;
  }

  .card-body {
      display: flex;
      flex-direction: column;
      text-align: left;
      margin-left: 20px;
      margin-top: 10px;
  }

  .card-body .hidden {
      display: none;
  }

  .results-card {
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      padding: 20px;
      margin-top: 10px;
      width: 100%;
  }

  .results-card-title a {
      color: var(--primary);
  }

  .results-card-body {
      color: grey;
      margin-top: 1em;
  }

  .filter-box {
      display: flex;
      align-items: center;
      margin-top: 20px;
      max-width: 1200px;
  }

  .filter-item {
      margin-right: 5px;
      background: var(--secondary);
      color: white;
      padding: 5px 10px 5px 20px;
      border-radius: 15px;
      height: 40px;
  }

  .filter-item:hover {
      transform: scale(1.05);
  }

  .filter-item a {
      font-size: 20px;
      color: white;
      text-decoration: none;
      border-radius: 5px;
      padding: 0px 8px 2px 8px;
      background-color: transparent;
  }

  .filter-item a:hover {
      color: var(--primary);
  }

  .format-container {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 40px;
      overflow-wrap: normal;
  }

  .tag-container {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 40px;
      flex-direction: row;
  }

  .format-box {
      border: 1px solid;
      border-color: gray;
      padding: 0px 10px 2px 10px;
      color: gray;
      border-radius: 10px;
  }

  .truncated-content p {
      margin: 0px;
  }

  .close {
      position: absolute;
      top: 10px;
      right: 10px;
      cursor: pointer;
  }

  openModalButton:hover {
      transform: scale(1.05, 1.05);
  }

  .cloud {
      padding-top: 20px;
      width: 100%;
      text-align: center;
      line-height: 1;
  }

  .cloud span {
      cursor: pointer;
  }

  .additional-info-container {
    display: flex;
    flex-direction: column;
    gap: 10px; 
  }

  .additional-info-container span {
    display: block; 
    word-wrap: break-word; 
  }


  

</style>




<script>
  window.savedDatasets = <%= raw @datasets.as_json.to_json %>;
</script>
<div class="container mt-4">
  <!-- Modal Saved Datasets -->
  <div class="modal-overlay">
    <div class="modal">
      <div id="partial-view-container">
        <%= render partial: "datasets_list" %>
      </div>
      <span class="close" id="closeModal">&times;</span>
    </div>
  </div>
  <!-- Help section -->
  <%= render partial: "help_section" %>


<!-- Admin settings for idra url 



  <% if current_user&.admin? %>
  <div class="mb-2" style="text-align: center; margin-top: 20px;">

  <button id="toggle-manage" class="button button__sm button__secondary mb-2" onclick="toggleManageForm()">Manage</button>

  </div>

  <div id="manage-form" style="display: none; margin-top: 20px; text-align: center;">
  <div style="text-align: left; display: flex; flex-direction: row; align-items: center; justify-content: center">
      <%= form_with(url: idra_path, method: :get, class: "form") do |f| %>
       <span style="margin-bottom: 10px; margin-right: 1rem">
  <%= f.text_field "Api url: ", value: @api_url %>
</span>

<span style="margin-bottom: 10px;">
  <%= f.text_field "Api catalogues info url: ", value: @api_catalogues_info_url %>
</span>


        <div style="text-align: center;" class="button button__sm button__secondary mb-2 mt-2 ml-2">
          <%= f.submit "Invia" %>
        </div>
      <% end %>
    </div>
  </div>
-->

  <script>
    function toggleManageForm() {
      const form = document.getElementById("manage-form");
      const button = document.getElementById("toggle-manage");
      const isHidden = form.style.display === "none";
      form.style.display = isHidden ? "block" : "none";
      button.textContent = isHidden ? "Close" : "Manage";
    }
  </script>
<% end %>






  <!-- Search form -->
  <%= render partial: "search_form" %>
  <!-- Filters -->
  <%= render partial: "filters" %>
  <div class="row-body">
    <!-- Left column -->
    <div class="col col-left">
    <%= render partial: "facets" %>
    </div>
    <!-- Right Column -->
    <div class="col col-right">
    <!-- Buttons on top -->
    <%= render partial: "top_buttons" %>
    <!-- Search Results -->
    <%= render partial: "search_results" %>
    <!-- Buttons on bottom -->
    <%= render partial: "buttons_bottom" %>
  </div>
</div>


<script>
 




     document.addEventListener("DOMContentLoaded", function() {
     const showMoreButtons = document.querySelectorAll(".show-more-details-button");

     showMoreButtons.forEach(button => {
       button.addEventListener("click", function() {
         const card = button.closest(".results-card");
         const targetId = button.getAttribute("data-target");
         const detailsDiv = card.querySelector("#" + targetId);

         if (detailsDiv.style.display === "none" || detailsDiv.style.display === "") {
           detailsDiv.style.display = "block";
           button.textContent = "-";
         } else {
           detailsDiv.style.display = "none";
           button.textContent = "+";
         }
       });
     });
   });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    var searchTriggers = document.querySelectorAll('.search-trigger');

    searchTriggers.forEach(function(trigger) {
      trigger.addEventListener('click', function() {
        var searchValue = this.textContent.trim(); 

        var searchInput = document.querySelector('input[name="search"]');
        if (searchInput) {
          searchInput.value = searchValue;

          // Invia il modulo
          var searchForm = document.querySelector('.search-form');
          if (searchForm) {
            searchForm.submit();
          }
        }
      });
    });
  });
</script>
<script>
  function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }

  var spans = document.querySelectorAll('.cloud span');
  var colors = ['--primary', '--secondary', '--warning'];

  spans.forEach(function(span, index) {
    var colorIndex = index % colors.length;
    var colorVariable = colors[colorIndex];
    span.style.color = `var(${colorVariable})`;

    var text = span.textContent.trim();
    var number = text.match(/\(\d+\)/);

    if (number !== null) {
      var newText = text.replace(number[0], '').replace(/\(|\)/g, '').trim();
      span.textContent = newText + " " + " ";

      var weight = parseInt(number[0].replace(/\(|\)/g, ''));
      var fontSize = weight

      fontSize = Math.min(Math.max(fontSize, 15), 30);

      span.style.fontSize = fontSize + 'px';
    }
  });

  function highlightSpan() {
    // Ottieni il colore corrente in formato RGB
    var currentColor = getComputedStyle(this).color;

    // Estrai i valori di rosso, verde e blu dal colore RGB
    var rgbValues = currentColor.match(/\d+/g);
    var red = rgbValues[0];
    var green = rgbValues[1];
    var blue = rgbValues[2];

    var rgbaColor = 'rgba(' + red + ', ' + green + ', ' + blue + ', 0.3)';

    this.style.backgroundColor = rgbaColor;
  }


  function resetHighlight() {
    this.style.backgroundColor = ''; // Ripristina il colore di sfondo predefinito
  }

  // Aggiungi eventi mouseenter e mouseleave a ciascuno span
  spans.forEach(function (span) {
    span.addEventListener('mouseenter', highlightSpan);
    span.addEventListener('mouseleave', resetHighlight);
  });

  var shuffledSpans = shuffle(Array.from(spans));

  var parentContainer = document.querySelector('.cloud');
  parentContainer.innerHTML = '';

  shuffledSpans.forEach(function(span) {
    parentContainer.appendChild(span);
  });
</script>
<script type="text/javascript">
  var counter = '<%= @element_count %>';
  var counterText = document.getElementById("count");
  counterText.innerHTML = counter;
  var starCounterButton = document.getElementById("openModalButton");

  var counterModalText = document.getElementById("countModal");
  counterModalText.innerHTML = counter;

  function toggleStarAndSaveTitle(title, buttonId, url) {
    var button = document.getElementById('buttonId-' + buttonId);
    var isStar = button.getAttribute('data-star');
    var counterText = document.getElementById("count");

    if (isStar === '1') {
      deleteTitle(buttonId, button, counterText); // Call delete function
    } else {
      saveTitle(title, buttonId, url, button, counterText); // Call save function
    }
  }

  function updatePartialView() {
  // Assuming your modal content is loaded from a URL like '/partial_view'
  fetch('/idra_update')
    .then(response => {
      if (response.ok) {
        return response.text();
      } else {
        throw new Error('Failed to fetch partial view');
      }
    })
    .then(html => {
      // Assuming your modal content is inside a div with id 'partial-view-container'
      document.getElementById('partial-view-container').innerHTML = html;
    })
    .catch(error => {
      console.error('Error fetching partial view:', error);
    });
  }




  function saveTitle(title, buttonId, url, button, counterText) {
    button.disabled = true; 
    fetch('/idra_create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector("meta[name=csrf-token]").content
      },
      body: JSON.stringify({ selected_titles: title, selected_url: url, selected_dataset_id: buttonId })
    })
    .then(response => {
      if (response.ok) {
      button.setAttribute('data-star', '1');
      button.innerHTML = "<span style='color: var(--warning)'>★</span>";
      button.disabled = false; // Re-enable the button
      counter++;
      counterText.innerHTML = counter;
        updatePartialView()
      } else {
        // Handle errors if needed
        console.error('Failed to save dataset:', response.status, response.statusText);
        button.disabled = false; // Re-enable the button if there was an error
        alert('Failed to save dataset. Please try again.');
      }
    })
    .catch(error => {
      // Handle errors if needed
      console.error('Error saving dataset:', error);
      button.disabled = false; // Re-enable the button if there was an error
      alert('An error occurred. Please try again.');
    });
  }

  function deleteTitle(buttonId, button, counterText) {
    button.disabled = true; // Disable the button to prevent multiple clicks
    fetch('/idra_delete', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector("meta[name=csrf-token]").content
      },
      body: JSON.stringify({ selected_dataset_id: buttonId })
    })
    .then(response => {
      if (response.ok) {

      button.setAttribute('data-star', '0');
      button.innerHTML = "☆"; // Set the button content to "☆"
      button.style.color = ""; // Reset button text color
      button.disabled = false; // Re-enable the button
      counter--;
      counterText.innerHTML = counter;
        updatePartialView()
      }else {
        console.error('Failed to delete dataset:', response.status, response.statusText);
        button.disabled = false; // Re-enable the button if there was an error
        alert('Failed to delete item. Please try again.');
      }
    })
    .catch(error => {
      console.error('Error deleting dataset:', error);
      button.disabled = false; // Re-enable the button if there was an error
      alert('An error occurred. Please try again.');
    });
  }

  document.addEventListener("DOMContentLoaded", function() {

    function openModal() {
      var modalOverlay = document.querySelector(".modal-overlay");
      if (modalOverlay) {
          modalOverlay.style.display = "block";
      } else {
          console.error("Elemento '.modal-overlay' non trovato.");
      }
  }
  
  function closeModal() {
      var modalOverlay = document.querySelector(".modal-overlay");
      if (modalOverlay) {
          modalOverlay.style.display = "none";
      } else {
          console.error("Elemento '.modal-overlay' non trovato.");
      }
  }
  
  var openModalButton = document.getElementById("openModalButton");
  if (openModalButton) {
      openModalButton.addEventListener("click", openModal);
  }
  
  var closeModalButton = document.getElementById("closeModal");
  if (closeModalButton) {
      closeModalButton.addEventListener("click", closeModal);
  }
  
  window.openModal = openModal;
  window.closeModal = closeModal;
  
    function filterDatasets() {
      var input = document.getElementById('search-bar');
      var filter = input.value.toLowerCase();
      var datasetsList = document.getElementById("datasets-list");
      var datasetItems = datasetsList.getElementsByClassName('dataset-item');
  
      for (var i = 0; i < datasetItems.length; i++) {
        var a = datasetItems[i].getElementsByTagName("a")[0];
        var txtValue = a.textContent || a.innerText;
        datasetItems[i].style.display = txtValue.toLowerCase().indexOf(filter) > -1 ? "" : "none";
      }
    }
  
    function refreshPage() {
      location.reload(); // Preferisci location.reload() per ricaricare la pagina
    }
  
    function closeModalIfEmpty(refreshPageFlag) {
      if (typeof counter !== 'undefined' && counter === 0) { // Assicurati che counter sia definito
        var modalOverlay = document.querySelector(".modal-overlay");
        if (modalOverlay) {
          modalOverlay.style.display = "none";
        }
        updatePartialView(); // Assicurati che questa funzione sia definita
        if (refreshPageFlag) {
          refreshPage();
        }
      }
    }
  
    
    // Rendi filterDatasets e deleteDataset globali
    window.filterDatasets = filterDatasets;
    window.deleteDataset = deleteDataset;
    window.refreshPage = refreshPage;
  
    var searchBar = document.getElementById('search-bar');
    if (searchBar) {
      searchBar.addEventListener('input', filterDatasets);
    }
  
    // Aggiungi listener per i pulsanti di eliminazione
    document.querySelectorAll('.delete-btn').forEach(button => {
      button.addEventListener('click', function() {
        var datasetId = this.getAttribute('data-dataset-id');
        if (datasetId) {
          deleteDataset(datasetId);
        }
      });
    });
  });
</script>